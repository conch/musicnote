<% stems = notes.scan(/\|(\w+)\|/) %>

<html>
  <head>
    <link rel="stylesheet/less" type="text/css" href="../css/sheet_music.less" />
    <script src="../js/jquery.min.js"></script>
    <script src="../js/jquery.cookie.js"></script>
    <script src="../js/less-1.1.3.min.js" ></script>
    <script src="../js/vexflow.js"></script>
    <script src="../js/canvas2image.js"></script>
    <script>
      $(document).ready(function() {
        // generate sheet music
        var canvas = $("canvas")[0];
        var renderer = new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS);
        var ctx = renderer.getContext();

        // draw staves and notes. each stave can hold 16 stems
        <% for s in 0..(stems.size / 16.0).floor %>
          // setup treble and bass staves
          var trebleStave = new Vex.Flow.Stave(25, 95 + 300*<%= s %>, 800);
          trebleStave.addClef("treble").setContext(ctx).draw();
          var bassStave = new Vex.Flow.Stave(25, 95 + 300*<%= s %> + 60, 800);
          bassStave.addClef("bass").setContext(ctx).draw();
          // assemble notes
          var stems = [];
          <% for n in s*16..([(s+1)*16, stems.size].min - 1) %>
            <% matches = stems[n][0].scan(/(\d+)([a-zA-Z]+)/) %>
            ks = []; // holds all the keys
            acc = []; // holds all accidentals. indices match up with indices of ks
            <% for m in 0..(matches.size - 1) %>
              octave = "<%= matches[m][0] %>";
              tone = "<%= matches[m][1] %>";
              // convert octave number from piano to real octave numbers
              // 00 from piano is the 0th octave
              // 0 from piano is the 1st octave
              // 1 from piano is the 2nd octave
              // etc.
              octaveNum = 0;
              if (octave != "00") {
                octaveNum = parseInt(octave) + 1;
              }
              // make the tone lowercase and parse out accidentals
              key = tone[0].toLowerCase();
              ks[<%= m %>] = key + "/" + octaveNum;

              if (tone.length == 2) { // has accidental
                if (tone[1] == "s")
                  acc[<%= m %>] = "#";
                else
                  acc[<%= m %>] = "b";
              }
            <% end %>
            staveNote = new Vex.Flow.StaveNote({ keys: ks, duration: "q"});
            // add accidentals
            for (a = 0; a < acc.length; a++) {
              if (acc[a]) {
                staveNote.addAccidental(a, new Vex.Flow.Accidental(acc[a]));
              }
            }
            stems.push(staveNote);
          <% end %>

          // draw everything
          // Create a voice
          var voice = new Vex.Flow.Voice({
            num_beats: stems.length,
            beat_value: 4,
            resolution: Vex.Flow.RESOLUTION
          });
          // Add notes to voice
          voice.addTickables(stems);
          // Format and justify the notes to 500 pixels
          var formatter = new Vex.Flow.Formatter().joinVoices([voice]).format([voice], (stems.length / 16) * 750);
          // Render voice
          voice.draw(ctx, trebleStave);
        <% end %>

        // event handlers
        $("#fakeTags").focus(function() {
          $("#fakeTags").hide();
          $("#noteTags").show();
          $("#noteTags").focus();
        });
        $("#fakeContent").focus(function() {
          $("#fakeContent").hide();
          $("#noteContent").show();
          $("#noteContent").focus();
        });
        // load notebooks to <select>
        $.get("/notebooks",
              { "username" : $.cookie("evernote_username") },
              function(response) {
                optionHTML = "";
                for (o = 0; o < response.length; o++) {
                  optionHTML += "<option value=\"" + response[o][1] + "\">" + response[o][0] + "</option>";
                }
                $("#noteNotebook").html(optionHTML);
              },
              "json"
        );
      });

      function saveToEvernote() {
        // get data URI of the JPG and embed it in an Evernote note.
        $("#menu").animate({"height" : 225}, "fast");
        $("#form").show();
      }

      function backToPiano() {
        window.location.href = "/piano";
      }

      function submit() {
        $.post("/create_note",
              {
                "username" : $.cookie("evernote_username"),
                "title" : $("#noteTitle").val(),
                "comments" : $("#noteContent").val(),
                "base64" : $(Canvas2Image.saveAsJPEG($("canvas")[0], true)).attr("src"),
                "tags" : $("#noteTags").val(),
                "notebookGuid" : $("#noteNotebook").val()
              },
              function() {
                $("#confirmation").css("display", "inline");
              },
              "json"
        );
      }

      function cancel() {
        $("#form").hide();
        $("#menu").animate({"height" : 37}, "fast");
      }
    </script>
  </head>
  <body>
    <div id="menu">
      <div id="save" onclick="saveToEvernote()">Save to Evernote</div>
      <div id="back" onclick="backToPiano()">Back to Piano</div>
      <div id="form">
        <input id="noteTitle" value="Untitled" />
        <div id="notebookAndTags">
          <select id="noteNotebook"></select>
          <input id="noteTags" />
          <!-- The fake elements are used for this UI thing: textboxes initially have
          text that hints at what the user is supposed to type in. when they click in 
          the box, the instructions should disappear. -->
          <input id="fakeTags" value="Tags (comma-separated)" />
        </div>
        <textarea id="noteContent"></textarea>
        <textarea id="fakeContent">Comments...</textarea>
        <div id="buttons">
          <button onclick="submit()">Submit</button>
          <button onclick="cancel()">Cancel</button>
          <div id="confirmation">Saved!</div>
        </div>
      </div>
    </div>
    <canvas width="850" height="<%= (stems.size / 16.0).ceil * 350 %>"></canvas>
  </body>
</html>